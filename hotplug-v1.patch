--- /root/android/kernel/SHW-M250S/stock-kernel_shw-m250s/kernel/arch/arm/mach-s5pv310/pm-hotplug.c	2011-07-26 14:25:35.000000000 +0900
+++ arch/arm/mach-s5pv310/pm-hotplug.c	2011-11-07 00:14:22.642304493 +0900
@@ -35,6 +35,9 @@
 #include <linux/gpio.h>
 #include <linux/cpufreq.h>
 
+#include <linux/device.h> 		//for second_core by tegrak
+#include <linux/miscdevice.h> 	//for second_core by tegrak
+
 #define CPUMON 0
 
 #define CHECK_DELAY	(.5*HZ)
@@ -69,12 +72,25 @@
    timer(softirq) context but in process context */
 static DEFINE_MUTEX(hotplug_lock);
 
+/* Second core values by tegrak */
+#define SECOND_CORE_VERSION (1)
+int second_core_on = 1;
+int hotplug_on = 1;
+
 static void hotplug_timer(struct work_struct *work)
 {
 	unsigned int i, avg_load = 0, load = 0;
 	unsigned int cur_freq;
 
 	mutex_lock(&hotplug_lock);
+	
+	// exit if we turned off dynamic hotplug by tegrak
+	// cancel the timer
+	if (!hotplug_on) {
+		if (!second_core_on && cpu_online(1) == 1)
+			cpu_down(1);
+		goto off_hotplug;
+	}
 
 	if (user_lock == 1)
 		goto no_hotplug;
@@ -127,10 +143,12 @@
 		printk("cpu1 on end!\n");
 		hotpluging_rate = CHECK_DELAY * 4;
 	}
- no_hotplug:
-
+	
+no_hotplug:
+	//printk("hotplug_timer done.\n");
 	queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
 
+off_hotplug:
 	mutex_unlock(&hotplug_lock);
 }
 
@@ -179,8 +197,125 @@
 	.notifier_call = hotplug_reboot_notifier_call,
 };
 
+/****************************************
+ * DEVICE ATTRIBUTES FUNCTION by tegrak
+****************************************/
+#define declare_show(filename) \
+	static ssize_t show_##filename(struct device *dev, struct device_attribute *attr, char *buf)
+
+#define declare_store(filename) \
+	static ssize_t store_##filename(\
+		struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+
+/****************************************
+ * second_core attributes function by tegrak
+ ****************************************/
+declare_show(version) {
+	return sprintf(buf, "%u\n", SECOND_CORE_VERSION);
+}
+
+declare_show(author) {
+	return sprintf(buf, "Tegrak\n");
+}
+
+declare_show(hotplug_on) {
+	return sprintf(buf, "%s\n", (hotplug_on) ? ("on") : ("off"));
+}
+
+declare_store(hotplug_on) {	
+	mutex_lock(&hotplug_lock);
+	
+	if (user_lock) {
+		goto finish;
+	}
+	
+	if (!hotplug_on && strcmp(buf, "on\n") == 0) {
+		hotplug_on = 1;
+		// restart worker thread.
+		hotpluging_rate = CHECK_DELAY;
+		queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
+		printk("second_core: hotplug is on!\n");
+	}
+	else if (hotplug_on && strcmp(buf, "off\n") == 0) {
+		hotplug_on = 0;
+		second_core_on = 1;
+		if (cpu_online(1) == 0) {
+			cpu_up(1);
+		}
+		printk("second_core: hotplug is off!\n");
+	}
+	
+finish:
+	mutex_unlock(&hotplug_lock);
+	return size;
+}
+
+declare_show(second_core_on) {
+	return sprintf(buf, "%s\n", (second_core_on) ? ("on") : ("off"));
+}
+
+declare_store(second_core_on) {
+	mutex_lock(&hotplug_lock);
+	
+	if (hotplug_on || user_lock) {
+		goto finish;
+	}
+	
+	if (!second_core_on && strcmp(buf, "on\n") == 0) {
+		second_core_on = 1;
+		if (cpu_online(1) == 0) {
+			cpu_up(1);
+		}
+		printk("second_core: 2nd core is always on!\n");
+	}
+	else if (second_core_on && strcmp(buf, "off\n") == 0) {
+		second_core_on = 0;
+		if (cpu_online(1) == 1) {
+			cpu_down(1);
+		}
+		printk("second_core: 2nd core is always off!\n");
+	}
+	
+finish:
+	mutex_unlock(&hotplug_lock);
+	return size;
+}
+
+/****************************************
+ * DEVICE ATTRIBUTE by tegrak
+ ****************************************/
+#define declare_attr_rw(filename, perm) \
+	static DEVICE_ATTR(filename, perm, show_##filename, store_##filename)
+#define declare_attr_ro(filename, perm) \
+	static DEVICE_ATTR(filename, perm, show_##filename, NULL)
+#define declare_attr_wo(filename, perm) \
+	static DEVICE_ATTR(filename, perm, NULL, store_##filename)
+
+declare_attr_ro(version, 0444);
+declare_attr_ro(author, 0444);
+declare_attr_rw(hotplug_on, 0666);
+declare_attr_rw(second_core_on, 0666);
+
+static struct attribute *second_core_attributes[] = {
+	&dev_attr_hotplug_on.attr, 
+	&dev_attr_second_core_on.attr,
+	&dev_attr_version.attr,
+	&dev_attr_author.attr,
+	NULL
+};
+
+static struct attribute_group second_core_group = {
+		.attrs  = second_core_attributes,
+};
+
+static struct miscdevice second_core_device = {
+		.minor = MISC_DYNAMIC_MINOR,
+		.name = "second_core",
+};
+
 static int __init s5pv310_pm_hotplug_init(void)
 {
+	int ret;
 	printk(KERN_INFO "SMDKV310 PM-hotplug init function\n");
 	hotplug_wq = create_singlethread_workqueue("dynamic hotplug");
 	if (!hotplug_wq) {
@@ -194,6 +329,20 @@
 
 	register_pm_notifier(&s5pv310_pm_hotplug_notifier);
 	register_reboot_notifier(&hotplug_reboot_notifier);
+	
+	// register second_core device by tegrak
+	ret = misc_register(&second_core_device);
+	if (ret) {
+		printk(KERN_ERR "failed at(%d)\n", __LINE__);
+		return ret;
+	}
+	
+	ret = sysfs_create_group(&second_core_device.this_device->kobj, &second_core_group);
+	if (ret)
+	{
+		printk(KERN_ERR "failed at(%d)\n", __LINE__);
+		return ret;
+	}
 
 	return 0;
 }

